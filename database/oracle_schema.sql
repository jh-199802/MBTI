-- MBTI 테스트 사이트 Oracle Database 스키마
-- 작성일: 2025-07-23
-- 버전: 1.0

-- 1. 시퀀스 생성
-- 테스트 결과 시퀀스
CREATE SEQUENCE SEQ_TEST_RESULT
    START WITH 1
    INCREMENT BY 1
    NOMAXVALUE
    NOCYCLE
    CACHE 20;

-- 댓글 시퀀스
CREATE SEQUENCE SEQ_COMMENT
    START WITH 1
    INCREMENT BY 1
    NOMAXVALUE
    NOCYCLE
    CACHE 20;

-- 공유 로그 시퀀스
CREATE SEQUENCE SEQ_SHARE_LOG
    START WITH 1
    INCREMENT BY 1
    NOMAXVALUE
    NOCYCLE
    CACHE 20;

-- 조회 로그 시퀀스
CREATE SEQUENCE SEQ_VIEW_LOG
    START WITH 1
    INCREMENT BY 1
    NOMAXVALUE
    NOCYCLE
    CACHE 20;

-- 일별 통계 시퀀스
CREATE SEQUENCE SEQ_DAILY_STAT
    START WITH 1
    INCREMENT BY 1
    NOMAXVALUE
    NOCYCLE
    CACHE 20;

-- 통계 캐시 시퀀스
CREATE SEQUENCE SEQ_STATISTICS_CACHE
    START WITH 1
    INCREMENT BY 1
    NOMAXVALUE
    NOCYCLE
    CACHE 20;

-- 2. 테이블 생성
-- 테스트 결과 테이블
CREATE TABLE TEST_RESULTS (
    RESULT_ID NUMBER(19) PRIMARY KEY,
    USER_IP VARCHAR2(50),
    USER_AGENT VARCHAR2(500),
    MBTI_TYPE VARCHAR2(4) NOT NULL,
    CATEGORY_SCORES CLOB,
    ANSWER_DATA CLOB,
    AI_ANALYSIS CLOB,
    TEST_DURATION NUMBER(10),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 댓글 테이블
CREATE TABLE COMMENTS (
    COMMENT_ID NUMBER(19) PRIMARY KEY,
    RESULT_ID NUMBER(19),
    MBTI_TYPE VARCHAR2(4) NOT NULL,
    NICKNAME VARCHAR2(50),
    COMMENT_TEXT VARCHAR2(1000) NOT NULL,
    USER_IP VARCHAR2(50),
    LIKES_COUNT NUMBER(10) DEFAULT 0,
    IS_DELETED VARCHAR2(1) DEFAULT 'N',
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_COMMENTS_RESULT FOREIGN KEY (RESULT_ID) REFERENCES TEST_RESULTS(RESULT_ID),
    CONSTRAINT CHK_COMMENTS_DELETED CHECK (IS_DELETED IN ('Y', 'N'))
);

-- 공유 로그 테이블
CREATE TABLE SHARE_LOGS (
    SHARE_ID NUMBER(19) PRIMARY KEY,
    RESULT_ID NUMBER(19),
    MBTI_TYPE VARCHAR2(4) NOT NULL,
    PLATFORM VARCHAR2(50) NOT NULL,
    USER_IP VARCHAR2(50),
    USER_AGENT VARCHAR2(500),
    SHARED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_SHARE_LOGS_RESULT FOREIGN KEY (RESULT_ID) REFERENCES TEST_RESULTS(RESULT_ID)
);

-- 조회 로그 테이블
CREATE TABLE VIEW_LOGS (
    VIEW_ID NUMBER(19) PRIMARY KEY,
    RESULT_ID NUMBER(19),
    MBTI_TYPE VARCHAR2(4),
    PAGE_TYPE VARCHAR2(50) NOT NULL,
    USER_IP VARCHAR2(50),
    USER_AGENT VARCHAR2(500),
    REFERRER VARCHAR2(500),
    SESSION_ID VARCHAR2(100),
    VIEWED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_VIEW_LOGS_RESULT FOREIGN KEY (RESULT_ID) REFERENCES TEST_RESULTS(RESULT_ID)
);

-- 일별 통계 테이블
CREATE TABLE DAILY_STATS (
    STAT_ID NUMBER(19) PRIMARY KEY,
    STAT_DATE DATE NOT NULL,
    MBTI_TYPE VARCHAR2(4),
    TOTAL_TESTS NUMBER(10) DEFAULT 0,
    TOTAL_VIEWS NUMBER(10) DEFAULT 0,
    TOTAL_SHARES NUMBER(10) DEFAULT 0,
    TOTAL_COMMENTS NUMBER(10) DEFAULT 0,
    UNIQUE_VISITORS NUMBER(10) DEFAULT 0,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT UK_DAILY_STATS UNIQUE (STAT_DATE, MBTI_TYPE)
);

-- 통계 캐시 테이블
CREATE TABLE STATISTICS_CACHE (
    CACHE_ID NUMBER(19) PRIMARY KEY,
    CACHE_KEY VARCHAR2(100) NOT NULL UNIQUE,
    CACHE_VALUE CLOB,
    CACHE_TYPE VARCHAR2(50) NOT NULL,
    EXPIRES_AT TIMESTAMP,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 3. 인덱스 생성
-- 테스트 결과 인덱스
CREATE INDEX IDX_TEST_RESULTS_MBTI ON TEST_RESULTS(MBTI_TYPE);
CREATE INDEX IDX_TEST_RESULTS_DATE ON TEST_RESULTS(CREATED_AT);
CREATE INDEX IDX_TEST_RESULTS_IP ON TEST_RESULTS(USER_IP);

-- 댓글 인덱스
CREATE INDEX IDX_COMMENTS_RESULT ON COMMENTS(RESULT_ID);
CREATE INDEX IDX_COMMENTS_MBTI ON COMMENTS(MBTI_TYPE);
CREATE INDEX IDX_COMMENTS_DATE ON COMMENTS(CREATED_AT);
CREATE INDEX IDX_COMMENTS_LIKES ON COMMENTS(LIKES_COUNT);

-- 공유 로그 인덱스
CREATE INDEX IDX_SHARE_LOGS_RESULT ON SHARE_LOGS(RESULT_ID);
CREATE INDEX IDX_SHARE_LOGS_MBTI ON SHARE_LOGS(MBTI_TYPE);
CREATE INDEX IDX_SHARE_LOGS_PLATFORM ON SHARE_LOGS(PLATFORM);
CREATE INDEX IDX_SHARE_LOGS_DATE ON SHARE_LOGS(SHARED_AT);

-- 조회 로그 인덱스
CREATE INDEX IDX_VIEW_LOGS_RESULT ON VIEW_LOGS(RESULT_ID);
CREATE INDEX IDX_VIEW_LOGS_MBTI ON VIEW_LOGS(MBTI_TYPE);
CREATE INDEX IDX_VIEW_LOGS_PAGE ON VIEW_LOGS(PAGE_TYPE);
CREATE INDEX IDX_VIEW_LOGS_DATE ON VIEW_LOGS(VIEWED_AT);
CREATE INDEX IDX_VIEW_LOGS_SESSION ON VIEW_LOGS(SESSION_ID);

-- 일별 통계 인덱스
CREATE INDEX IDX_DAILY_STATS_DATE ON DAILY_STATS(STAT_DATE);
CREATE INDEX IDX_DAILY_STATS_MBTI ON DAILY_STATS(MBTI_TYPE);

-- 통계 캐시 인덱스
CREATE INDEX IDX_STATISTICS_CACHE_TYPE ON STATISTICS_CACHE(CACHE_TYPE);
CREATE INDEX IDX_STATISTICS_CACHE_EXPIRES ON STATISTICS_CACHE(EXPIRES_AT);

-- 4. 트리거 생성
-- 테스트 결과 업데이트 트리거
CREATE OR REPLACE TRIGGER TRG_TEST_RESULTS_UPDATE
    BEFORE UPDATE ON TEST_RESULTS
    FOR EACH ROW
BEGIN
    :NEW.UPDATED_AT := CURRENT_TIMESTAMP;
END;
/

-- 댓글 업데이트 트리거
CREATE OR REPLACE TRIGGER TRG_COMMENTS_UPDATE
    BEFORE UPDATE ON COMMENTS
    FOR EACH ROW
BEGIN
    :NEW.UPDATED_AT := CURRENT_TIMESTAMP;
END;
/

-- 일별 통계 업데이트 트리거
CREATE OR REPLACE TRIGGER TRG_DAILY_STATS_UPDATE
    BEFORE UPDATE ON DAILY_STATS
    FOR EACH ROW
BEGIN
    :NEW.UPDATED_AT := CURRENT_TIMESTAMP;
END;
/

-- 통계 캐시 업데이트 트리거
CREATE OR REPLACE TRIGGER TRG_STATISTICS_CACHE_UPDATE
    BEFORE UPDATE ON STATISTICS_CACHE
    FOR EACH ROW
BEGIN
    :NEW.UPDATED_AT := CURRENT_TIMESTAMP;
END;
/

-- 5. 초기 데이터 삽입
-- MBTI 타입별 초기 통계 데이터
INSERT INTO DAILY_STATS (STAT_ID, STAT_DATE, MBTI_TYPE, TOTAL_TESTS, TOTAL_VIEWS, TOTAL_SHARES, TOTAL_COMMENTS, UNIQUE_VISITORS)
SELECT 
    SEQ_DAILY_STAT.NEXTVAL,
    TRUNC(SYSDATE),
    mbti_type,
    0, 0, 0, 0, 0
FROM (
    SELECT 'INTJ' AS mbti_type FROM DUAL UNION ALL
    SELECT 'INTP' FROM DUAL UNION ALL
    SELECT 'ENTJ' FROM DUAL UNION ALL
    SELECT 'ENTP' FROM DUAL UNION ALL
    SELECT 'INFJ' FROM DUAL UNION ALL
    SELECT 'INFP' FROM DUAL UNION ALL
    SELECT 'ENFJ' FROM DUAL UNION ALL
    SELECT 'ENFP' FROM DUAL UNION ALL
    SELECT 'ISTJ' FROM DUAL UNION ALL
    SELECT 'ISFJ' FROM DUAL UNION ALL
    SELECT 'ESTJ' FROM DUAL UNION ALL
    SELECT 'ESFJ' FROM DUAL UNION ALL
    SELECT 'ISTP' FROM DUAL UNION ALL
    SELECT 'ISFP' FROM DUAL UNION ALL
    SELECT 'ESTP' FROM DUAL UNION ALL
    SELECT 'ESFP' FROM DUAL
);

-- 통계 캐시 초기 데이터
INSERT INTO STATISTICS_CACHE (CACHE_ID, CACHE_KEY, CACHE_VALUE, CACHE_TYPE, EXPIRES_AT)
VALUES (SEQ_STATISTICS_CACHE.NEXTVAL, 'mbti_distribution', '{}', 'JSON', SYSDATE + 1);

INSERT INTO STATISTICS_CACHE (CACHE_ID, CACHE_KEY, CACHE_VALUE, CACHE_TYPE, EXPIRES_AT)
VALUES (SEQ_STATISTICS_CACHE.NEXTVAL, 'daily_stats', '{}', 'JSON', SYSDATE + 1/24);

INSERT INTO STATISTICS_CACHE (CACHE_ID, CACHE_KEY, CACHE_VALUE, CACHE_TYPE, EXPIRES_AT)
VALUES (SEQ_STATISTICS_CACHE.NEXTVAL, 'popular_comments', '[]', 'JSON', SYSDATE + 1/6);

-- 6. 프로시저 생성
-- 일별 통계 업데이트 프로시저
CREATE OR REPLACE PROCEDURE UPDATE_DAILY_STATS(
    p_date DATE DEFAULT TRUNC(SYSDATE),
    p_mbti_type VARCHAR2 DEFAULT NULL
)
IS
BEGIN
    -- 특정 MBTI 타입에 대한 업데이트
    IF p_mbti_type IS NOT NULL THEN
        MERGE INTO DAILY_STATS ds
        USING (
            SELECT 
                p_date AS stat_date,
                p_mbti_type AS mbti_type,
                COUNT(*) AS test_count,
                (SELECT COUNT(*) FROM VIEW_LOGS vl 
                 WHERE TRUNC(vl.VIEWED_AT) = p_date 
                 AND vl.MBTI_TYPE = p_mbti_type) AS view_count,
                (SELECT COUNT(*) FROM SHARE_LOGS sl 
                 WHERE TRUNC(sl.SHARED_AT) = p_date 
                 AND sl.MBTI_TYPE = p_mbti_type) AS share_count,
                (SELECT COUNT(*) FROM COMMENTS c 
                 WHERE TRUNC(c.CREATED_AT) = p_date 
                 AND c.MBTI_TYPE = p_mbti_type) AS comment_count,
                (SELECT COUNT(DISTINCT USER_IP) FROM TEST_RESULTS tr 
                 WHERE TRUNC(tr.CREATED_AT) = p_date 
                 AND tr.MBTI_TYPE = p_mbti_type) AS unique_visitors
            FROM TEST_RESULTS tr
            WHERE TRUNC(tr.CREATED_AT) = p_date
            AND tr.MBTI_TYPE = p_mbti_type
        ) src ON (ds.STAT_DATE = src.stat_date AND ds.MBTI_TYPE = src.mbti_type)
        WHEN MATCHED THEN
            UPDATE SET 
                TOTAL_TESTS = src.test_count,
                TOTAL_VIEWS = src.view_count,
                TOTAL_SHARES = src.share_count,
                TOTAL_COMMENTS = src.comment_count,
                UNIQUE_VISITORS = src.unique_visitors,
                UPDATED_AT = CURRENT_TIMESTAMP
        WHEN NOT MATCHED THEN
            INSERT (STAT_ID, STAT_DATE, MBTI_TYPE, TOTAL_TESTS, TOTAL_VIEWS, TOTAL_SHARES, TOTAL_COMMENTS, UNIQUE_VISITORS)
            VALUES (SEQ_DAILY_STAT.NEXTVAL, src.stat_date, src.mbti_type, src.test_count, src.view_count, src.share_count, src.comment_count, src.unique_visitors);
    ELSE
        -- 모든 MBTI 타입에 대한 업데이트
        FOR mbti_rec IN (
            SELECT DISTINCT MBTI_TYPE FROM TEST_RESULTS
            UNION
            SELECT 'INTJ' FROM DUAL UNION ALL SELECT 'INTP' FROM DUAL UNION ALL
            SELECT 'ENTJ' FROM DUAL UNION ALL SELECT 'ENTP' FROM DUAL UNION ALL
            SELECT 'INFJ' FROM DUAL UNION ALL SELECT 'INFP' FROM DUAL UNION ALL
            SELECT 'ENFJ' FROM DUAL UNION ALL SELECT 'ENFP' FROM DUAL UNION ALL
            SELECT 'ISTJ' FROM DUAL UNION ALL SELECT 'ISFJ' FROM DUAL UNION ALL
            SELECT 'ESTJ' FROM DUAL UNION ALL SELECT 'ESFJ' FROM DUAL UNION ALL
            SELECT 'ISTP' FROM DUAL UNION ALL SELECT 'ISFP' FROM DUAL UNION ALL
            SELECT 'ESTP' FROM DUAL UNION ALL SELECT 'ESFP' FROM DUAL
        ) LOOP
            UPDATE_DAILY_STATS(p_date, mbti_rec.MBTI_TYPE);
        END LOOP;
    END IF;
    
    COMMIT;
END;
/

-- 캐시 정리 프로시저
CREATE OR REPLACE PROCEDURE CLEANUP_EXPIRED_CACHE
IS
BEGIN
    DELETE FROM STATISTICS_CACHE 
    WHERE EXPIRES_AT < CURRENT_TIMESTAMP;
    
    COMMIT;
END;
/

-- 7. 뷰 생성
-- MBTI 분포 뷰
CREATE OR REPLACE VIEW V_MBTI_DISTRIBUTION AS
SELECT 
    MBTI_TYPE,
    COUNT(*) AS test_count,
    ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM TEST_RESULTS), 2) AS percentage,
    MAX(CREATED_AT) AS latest_test
FROM TEST_RESULTS
GROUP BY MBTI_TYPE
ORDER BY test_count DESC;

-- 인기 댓글 뷰
CREATE OR REPLACE VIEW V_POPULAR_COMMENTS AS
SELECT 
    c.COMMENT_ID,
    c.MBTI_TYPE,
    c.NICKNAME,
    c.COMMENT_TEXT,
    c.LIKES_COUNT,
    c.CREATED_AT,
    DENSE_RANK() OVER (PARTITION BY c.MBTI_TYPE ORDER BY c.LIKES_COUNT DESC, c.CREATED_AT DESC) AS rank_in_type
FROM COMMENTS c
WHERE c.IS_DELETED = 'N'
AND c.LIKES_COUNT > 0;

-- 일별 통계 요약 뷰
CREATE OR REPLACE VIEW V_DAILY_SUMMARY AS
SELECT 
    STAT_DATE,
    SUM(TOTAL_TESTS) AS daily_total_tests,
    SUM(TOTAL_VIEWS) AS daily_total_views,
    SUM(TOTAL_SHARES) AS daily_total_shares,
    SUM(TOTAL_COMMENTS) AS daily_total_comments,
    SUM(UNIQUE_VISITORS) AS daily_unique_visitors,
    COUNT(DISTINCT MBTI_TYPE) AS active_mbti_types
FROM DAILY_STATS
GROUP BY STAT_DATE
ORDER BY STAT_DATE DESC;

-- 8. 권한 설정 (필요시)
-- GRANT SELECT, INSERT, UPDATE, DELETE ON TEST_RESULTS TO mbti_app_user;
-- GRANT SELECT, INSERT, UPDATE, DELETE ON COMMENTS TO mbti_app_user;
-- GRANT SELECT, INSERT, UPDATE, DELETE ON SHARE_LOGS TO mbti_app_user;
-- GRANT SELECT, INSERT, UPDATE, DELETE ON VIEW_LOGS TO mbti_app_user;
-- GRANT SELECT, INSERT, UPDATE, DELETE ON DAILY_STATS TO mbti_app_user;
-- GRANT SELECT, INSERT, UPDATE, DELETE ON STATISTICS_CACHE TO mbti_app_user;
-- GRANT SELECT ON V_MBTI_DISTRIBUTION TO mbti_app_user;
-- GRANT SELECT ON V_POPULAR_COMMENTS TO mbti_app_user;
-- GRANT SELECT ON V_DAILY_SUMMARY TO mbti_app_user;
-- GRANT EXECUTE ON UPDATE_DAILY_STATS TO mbti_app_user;
-- GRANT EXECUTE ON CLEANUP_EXPIRED_CACHE TO mbti_app_user;

-- 9. 주석 추가
COMMENT ON TABLE TEST_RESULTS IS 'MBTI 테스트 결과 저장 테이블';
COMMENT ON TABLE COMMENTS IS '사용자 댓글 테이블';
COMMENT ON TABLE SHARE_LOGS IS 'SNS 공유 로그 테이블';
COMMENT ON TABLE VIEW_LOGS IS '페이지 조회 로그 테이블';
COMMENT ON TABLE DAILY_STATS IS '일별 통계 집계 테이블';
COMMENT ON TABLE STATISTICS_CACHE IS '통계 데이터 캐시 테이블';

-- 컬럼 주석
COMMENT ON COLUMN TEST_RESULTS.RESULT_ID IS '테스트 결과 고유 ID';
COMMENT ON COLUMN TEST_RESULTS.USER_IP IS '사용자 IP 주소';
COMMENT ON COLUMN TEST_RESULTS.MBTI_TYPE IS 'MBTI 결과 타입 (4자리)';
COMMENT ON COLUMN TEST_RESULTS.CATEGORY_SCORES IS '카테고리별 점수 (JSON)';
COMMENT ON COLUMN TEST_RESULTS.ANSWER_DATA IS '답변 데이터 (JSON)';
COMMENT ON COLUMN TEST_RESULTS.AI_ANALYSIS IS 'AI 분석 결과 (JSON)';
COMMENT ON COLUMN TEST_RESULTS.TEST_DURATION IS '테스트 소요 시간 (초)';

COMMENT ON COLUMN COMMENTS.LIKES_COUNT IS '좋아요 수';
COMMENT ON COLUMN COMMENTS.IS_DELETED IS '삭제 여부 (Y/N)';

COMMENT ON COLUMN SHARE_LOGS.PLATFORM IS '공유 플랫폼 (facebook, twitter, kakao 등)';

COMMENT ON COLUMN VIEW_LOGS.PAGE_TYPE IS '페이지 타입 (test, result, dashboard 등)';
COMMENT ON COLUMN VIEW_LOGS.REFERRER IS '리퍼러 URL';
COMMENT ON COLUMN VIEW_LOGS.SESSION_ID IS '세션 ID';

COMMENT ON COLUMN STATISTICS_CACHE.CACHE_KEY IS '캐시 키';
COMMENT ON COLUMN STATISTICS_CACHE.CACHE_VALUE IS '캐시 값 (JSON)';
COMMENT ON COLUMN STATISTICS_CACHE.CACHE_TYPE IS '캐시 타입';
COMMENT ON COLUMN STATISTICS_CACHE.EXPIRES_AT IS '만료 시간';

-- 스키마 생성 완료 메시지
SELECT 'MBTI 테스트 사이트 Oracle 스키마 생성이 완료되었습니다.' AS MESSAGE FROM DUAL;
