-- =====================================================
-- 안전한 사용자 시스템 스키마 업데이트
-- =====================================================

-- 1. 기존 USERS 테이블 백업 (중요한 데이터가 있다면)
-- CREATE TABLE USERS_BACKUP AS SELECT * FROM USERS;

-- 2. 기존 USERS 테이블 삭제 (데이터가 없거나 백업 완료 후)
DROP TABLE USERS CASCADE CONSTRAINTS;

-- 3. 기존 시퀀스 삭제 (있다면)
DROP SEQUENCE SEQ_USER;

-- 4. 새로운 시퀀스 생성
CREATE SEQUENCE SEQ_USER
    START WITH 1
    INCREMENT BY 1
    NOMAXVALUE
    NOCYCLE
    CACHE 20;

-- 5. 새로운 USERS 테이블 생성
CREATE TABLE USERS (
    USER_ID NUMBER(20) PRIMARY KEY,
    USERNAME VARCHAR2(50) NOT NULL UNIQUE,
    EMAIL VARCHAR2(100) NOT NULL UNIQUE,
    PASSWORD_HASH VARCHAR2(255) NOT NULL,
    NICKNAME VARCHAR2(50),
    PROFILE_IMAGE VARCHAR2(500),
    MBTI_TYPE VARCHAR2(4),
    IS_ACTIVE CHAR(1) DEFAULT 'Y' CHECK (IS_ACTIVE IN ('Y', 'N')),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    LAST_LOGIN TIMESTAMP
);

-- 6. 기존 테이블에 USER_ID 컬럼 추가 (안전하게)
-- COMMENTS 테이블에 USER_ID 추가 (이미 있는지 확인)
DECLARE
    col_exists NUMBER;
BEGIN
    SELECT COUNT(*) INTO col_exists 
    FROM USER_TAB_COLUMNS 
    WHERE TABLE_NAME = 'COMMENTS' AND COLUMN_NAME = 'USER_ID';
    
    IF col_exists = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE COMMENTS ADD USER_ID NUMBER(20)';
        DBMS_OUTPUT.PUT_LINE('COMMENTS.USER_ID 컬럼 추가됨');
    ELSE
        DBMS_OUTPUT.PUT_LINE('COMMENTS.USER_ID 컬럼 이미 존재');
    END IF;
END;
/

-- TEST_RESULTS 테이블에 USER_ID 추가 (안전하게)
DECLARE
    col_exists NUMBER;
BEGIN
    SELECT COUNT(*) INTO col_exists 
    FROM USER_TAB_COLUMNS 
    WHERE TABLE_NAME = 'TEST_RESULTS' AND COLUMN_NAME = 'USER_ID';
    
    IF col_exists = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE TEST_RESULTS ADD USER_ID NUMBER(20)';
        DBMS_OUTPUT.PUT_LINE('TEST_RESULTS.USER_ID 컬럼 추가됨');
    ELSE
        DBMS_OUTPUT.PUT_LINE('TEST_RESULTS.USER_ID 컬럼 이미 존재');
    END IF;
END;
/

-- 7. COMMENTS 테이블의 RESULT_ID를 NULL 허용으로 변경
BEGIN
    EXECUTE IMMEDIATE 'ALTER TABLE COMMENTS MODIFY RESULT_ID NUMBER(10) NULL';
    DBMS_OUTPUT.PUT_LINE('COMMENTS.RESULT_ID NULL 허용으로 변경됨');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('COMMENTS.RESULT_ID 이미 NULL 허용 상태');
END;
/

-- 8. 인덱스 생성 (안전하게)
-- USERS 테이블 인덱스
CREATE INDEX IDX_USERS_USERNAME ON USERS(USERNAME);
CREATE INDEX IDX_USERS_EMAIL ON USERS(EMAIL);
CREATE INDEX IDX_USERS_MBTI_TYPE ON USERS(MBTI_TYPE);
CREATE INDEX IDX_USERS_CREATED_AT ON USERS(CREATED_AT);
CREATE INDEX IDX_USERS_LAST_LOGIN ON USERS(LAST_LOGIN);

-- 기존 테이블 인덱스 (이미 있으면 스킵)
DECLARE
    idx_exists NUMBER;
BEGIN
    SELECT COUNT(*) INTO idx_exists 
    FROM USER_INDEXES 
    WHERE INDEX_NAME = 'IDX_COMMENTS_USER_ID';
    
    IF idx_exists = 0 THEN
        EXECUTE IMMEDIATE 'CREATE INDEX IDX_COMMENTS_USER_ID ON COMMENTS(USER_ID)';
        DBMS_OUTPUT.PUT_LINE('IDX_COMMENTS_USER_ID 인덱스 생성됨');
    ELSE
        DBMS_OUTPUT.PUT_LINE('IDX_COMMENTS_USER_ID 인덱스 이미 존재');
    END IF;
END;
/

DECLARE
    idx_exists NUMBER;
BEGIN
    SELECT COUNT(*) INTO idx_exists 
    FROM USER_INDEXES 
    WHERE INDEX_NAME = 'IDX_TEST_RESULTS_USER_ID';
    
    IF idx_exists = 0 THEN
        EXECUTE IMMEDIATE 'CREATE INDEX IDX_TEST_RESULTS_USER_ID ON TEST_RESULTS(USER_ID)';
        DBMS_OUTPUT.PUT_LINE('IDX_TEST_RESULTS_USER_ID 인덱스 생성됨');
    ELSE
        DBMS_OUTPUT.PUT_LINE('IDX_TEST_RESULTS_USER_ID 인덱스 이미 존재');
    END IF;
END;
/

-- 9. 업데이트 트리거 생성
CREATE OR REPLACE TRIGGER TRG_USERS_UPDATE
    BEFORE UPDATE ON USERS
    FOR EACH ROW
BEGIN
    :NEW.UPDATED_AT := CURRENT_TIMESTAMP;
END;
/

-- 10. 테스트용 관리자 계정 생성
INSERT INTO USERS (
    USER_ID, USERNAME, EMAIL, PASSWORD_HASH, NICKNAME, 
    MBTI_TYPE, IS_ACTIVE
) VALUES (
    SEQ_USER.NEXTVAL, 
    'admin', 
    'admin@mbtitest.com', 
    '$2a$10$examplehashfromspring', 
    '관리자',
    'INTJ',
    'Y'
);

-- 11. 변경사항 커밋
COMMIT;

-- 12. 결과 확인
SELECT '=== USERS 테이블 구조 ===' AS INFO FROM DUAL;
DESC USERS;

SELECT '=== 생성된 시퀀스 ===' AS INFO FROM DUAL;
SELECT SEQUENCE_NAME, LAST_NUMBER 
FROM USER_SEQUENCES 
WHERE SEQUENCE_NAME = 'SEQ_USER';

SELECT '=== 추가된 컬럼 확인 ===' AS INFO FROM DUAL;
SELECT TABLE_NAME, COLUMN_NAME, DATA_TYPE, NULLABLE
FROM USER_TAB_COLUMNS 
WHERE TABLE_NAME IN ('COMMENTS', 'TEST_RESULTS') 
AND COLUMN_NAME = 'USER_ID';

SELECT '🎉 사용자 시스템 설정 완료! 🎉' AS MESSAGE FROM DUAL;
